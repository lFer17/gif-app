{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAiDeA,EA7CM,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,IADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAyBtC,OAEI,sBAAMC,SAhBe,SAACC,GACrBA,EAAEC,iBAMCJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAOlB,SACE,uBACMO,KAAM,OACNC,MAAQT,EACRU,SA1Be,SAACP,GACxBF,EAAeE,EAAEQ,OAAOF,QA0BhBG,YAAY,8B,+BClCfC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEAC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVxB,kBAeZM,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAOf,EAAMgB,IAAMN,IACxB,4BAAIA,QCuBDO,EA1BE,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDL,SAACA,GAAc,IAAD,EACZf,mBAAS,CACnCsB,KAAK,GACLa,SAAS,IAH6B,mBAC/BC,EAD+B,KACxBC,EADwB,KAkB1C,OAbIC,qBAAU,WACNxB,EAASC,GACRwB,MAAO,SAAAC,GACJH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAIlB,CAACpB,IAIAqB,EDf4BK,CAAc1B,GAAjCa,EAFiB,EAEtBN,KAAYa,EAFU,EAEVA,QAEnB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAIYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADGA,EAAIC,aEWpBgB,EA1BM,WAAM,IAAD,EAEc1C,mBAAS,CAAC,cAFxB,mBAEf2C,EAFe,KAEH5C,EAFG,KAKtB,OACI,qCACE,8CACA,cAAE,EAAF,CAAcA,cAAeA,IAE7B,uBAEA,6BAEQ4C,EAAWnB,KAAK,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAECA,SAAYA,GADNA,Y,MCf9B6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e7b4b917.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n const AddCategory = ({setcategories}) => {\r\n     const [inputValue, setinputValue] = useState('');\r\n\r\n     \r\n     //   recibe el valor por funcion que le da el onChange \r\n     const handleInputChange = (e) =>{\r\n        setinputValue( e.target.value);\r\n     }\r\n\r\n        // Define el comportamiento del onSubmit en el form   \r\n\r\n        const handleSubmit = (e) =>{\r\n         e.preventDefault();\r\n\r\n         //   hace una validacion del valor del form verifica que no tenga espacios en blanco\r\n        // y ejecuta la accion del submit introduciendo lo que esta en el inputValue dentro \r\n        // de la categories con el setcategories importado del componente GifExpertApp\r\n\r\n        if (inputValue.trim().length > 2){\r\n            setcategories(cats => [inputValue,...cats,]);\r\n            setinputValue('');\r\n         }\r\n\r\n     }\r\n\r\n    return (\r\n        \r\n        <form onSubmit={ handleSubmit }>\r\n          <input\r\n                type= \"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n                placeholder=\"Busca aquÃ­ los gifs\"\r\n          />\r\n        </form>\r\n        \r\n    )\r\n};\r\n\r\n// Prevents for the use of this component \r\n\r\nAddCategory.propTypes = {\r\n    setcategories:PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n\r\n\r\n","\r\n\r\nexport const getGifs = async (category) =>{\r\n        \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=Ocbn1QtisqcK5OcpH59qtyIIIfhPgIZD`\r\n    const resp = await fetch (url);\r\n    const {data} = await resp.json();\r\n\r\n     const gifs = data.map(img =>{\r\n         return {\r\n             id: img.id,\r\n             title: img.title,\r\n             url: img.images?.downsized_medium.url\r\n\r\n         }\r\n     })\r\n    // el setimage esta agarrando los valores de gifs para colocarlos en el stage image\r\n    return gifs;\r\n\r\n }","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src= { url } alt={ title }/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n const GifGrid = ({category}) => {\r\n\r\n    const {data:images,loading} =  useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\">loading</p>}\r\n          {/* el image.map retorna la info que hay en image llamando al nuevo componente GifGridItem  */}\r\n        <div className=\"card-grid\">\r\n            \r\n          \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                        key = {img.id} \r\n                        {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n    data:[],\r\n    loading: true\r\n});\r\n    useEffect(()=>{\r\n        getGifs( category )\r\n        .then ( imgs =>{\r\n            setState({\r\n                data: imgs,\r\n                loading:false\r\n            })\r\n        })\r\n\r\n    },[category])\r\n\r\n\r\n\r\nreturn state;\r\n\r\n}\r\n","import React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n const GifExpertApp =()=> {\r\n\r\n    const [categories, setcategories] = useState(['One Punch'])\r\n\r\n\r\n    return (\r\n        <>\r\n          <h2>GifExpertApp</h2>\r\n          < AddCategory setcategories={setcategories} /> \r\n          \r\n          <hr /> \r\n          \r\n          <ol>\r\n              {\r\n                  categories.map (category =>\r\n                       <GifGrid\r\n                       key = {category}\r\n                        category = {category}\r\n                       />\r\n                  )\r\n              }\r\n          </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}